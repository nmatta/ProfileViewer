{
  "name": "spud",
  "version": "1.1.4",
  "description": "Load and convert content bundles to and from different formats, including .properties, .json, etc.",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js",
    "cover": "istanbul cover tape -- test/*.js",
    "lint": "jshint -c .jshintrc index.js lib/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/krakenjs/spud.git"
  },
  "engines": {
    "node": ">=0.8"
  },
  "keywords": [
    "i18n"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "dependencies": {
    "bl": "^0.8.2",
    "string.fromcodepoint": "~0.1.0"
  },
  "devDependencies": {
    "tape": "^2.13.3",
    "istanbul": "^0.2.4",
    "jshint": "~2.4.3"
  },
  "readme": "Spud\n====\n\nLead Maintainer: [Aria Stewart](https://github.com/aredridel)  \n\n[![Build Status](https://travis-ci.org/krakenjs/spud.svg?branch=master)](https://travis-ci.org/krakenjs/spud)\n\nLoad and convert content bundles to and from different formats, including .properties, .json, etc.\n\nAPI\n---\n\n#### spud.registerSerializer(name, serializer)\nRegister a custom serializer. See the \"Plugins\" section below for more information on custom serializers\n\n```javascript\nvar mySerializer = require('node-mySerializer');\nrequire('spud').registerSerializer('mySerializer', mySerializer);\n```\n\n\n#### spud.convert(source, sourceType, targetType, [writeStream], [callback])\nDeserializes the source (file, buffer, or Read Stream) of type sourceType and serializes to targetType, writing the results to the optional writeStream, or providing them to the optional callback. The callback should have the signature `function (err, data);`\n\n```javascript\nvar spud = require('spud'),\n\tfs = require('fs'),\n\treadStream = fs.createReadStream('./config.json'),\n\twriteStream = fs.createWriteStream('./config.properties');\n\nspud.convert(readStream, 'json', 'properties', writeStream, function (err) {\n\tconsole.log('Conversion complete.');\n});\n```\n\n\n#### spud.deserialize(source, sourceType, callback)\nDeserializes the source (file, buffer, or Read Stream) of type sourceType and invokes the provided callback with the result or any error that occurred. The callback should have the signature `function (err, data);`\n\n```javascript\nvar spud = require('spud'),\n\tfs = require('fs'),\n\treadStream = fs.createReadStream('./config.json');\n\nspud.deserialize(readStream, 'json', function (err, data) {\n\tconsole.log(err || data);\n\tconsole.log('Conversion complete.');\n});\n```\n\n\n#### spud.serialize(source, targetType, [writeStream], [callback])\nSerializes the source (String) to targetType and invokes the provided callback with the result\nor any error that occurred. The callback should have the signature `function (err, data);`\n```javascript\nvar spud = require('spud'),\n\tfs = require('fs'),\n\twriteStream = fs.createWriteStream('./config.json');\n\nvar settings = {\n\thost: \"www.paypal.com\",\n\tport: 8080\n};\n\nspud.serialize(settings, 'json', writeStream, function (err) {\n\tconsole.log('Conversion complete.');\n});\n```\n\nSerializers supported out of the box\n------------------------------------\n\n`properties`: Java-style properties files, treated as UTF-8. Some effort is made build a richer object model from structured keys.\n\n```properties\nvalue=A Value\narray[0]=First Entry\narray[1]=Second Entry\nmap[US]=United States\nmap[GB]=United Kingdom\ninclude=../file.properties\n```\n\n`json`: A simple, direct output of the data structure as JSON\n\n```json\n{\n    \"value\": \"A Value\",\n    \"array\": [\n        \"First Entry\",\n        \"Second Entry\"\n    ],\n    \"map\": {\n        \"US\": \"United States\",\n        \"GB\": \"United Kingdom\"\n    },\n    \"include\": \"../file.json\"\n}\n```\n\nIncludes are processed at load time, using paths resolved relative to the source files, just like paths in `require(modulename)`. Which serializer is used is controlled by the file extension.\n\n\nPlugins\n---------------------------\nWriting serializers is easy. It's just 3 steps:\n\n1) Make sure your module exports an object with a property called 'Reader' and one called 'Writer' whose values\nare the constructors for your deserializer and serialzer, respectively:\n\n```javascript\n// index.js\nmodule.exports = {\n\tReader: MyReader,\n\tWriter: MyWriter\n};\n```\n\n2) Build out your deserializer implementation. It merely needs to implement a method called `_doDeserialize` that\naccepts data (in the form of a string) and callback arguments, and invokes the callback with error and deserialized data.\n\n```javascript\nfunction MyReader() {\n    MyReader.super_.call(this);\n}\n\nutil.inherits(MyReader, spud.AbstractReader);\n\nMyReader.prototype._doDeserialize = function(input, callback) {\n    // TODO: Implement\n    var data = null;\n    // ...\n    callback(null, data);\n};\n```\n\n3) Build out your serializer implementation and a Read Stream for outputting the serialized data. \n\n```javascript\nfunction MyWriter() {\n    MyWriter.super_.call(this);\n}\n\nutil.inherits(MyWriter, spud.AbstractWriter);\n\nMyWriter.prototype._doCreateReadStream = function (data) {\n    return new CustomReadStream(data);\n};\n```\n\nThe stream must accept a data object in its constructor and implement the [NodeJS Read Stream interface](http://nodejs.org/api/stream.html#stream_readable_stream). It is likely that this where your serialization implementation will go. When chunks of data are availble/serialized, write them out using the 'data' event.\n\n```javascript\nvar util = require('util');\n\nfunction CustomReadStream(data) {\n\tStream.call(this);\n\tthis._data = data;\n}\nutil.inherits(ReadStream, Stream);\n\nMyStream.prototype._read = function (size) {\n\tvar serialized = null;\n\t// TODO: Serialize this._data\n\tthis.push(serialized);\n};\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/krakenjs/spud/issues"
  },
  "homepage": "https://github.com/krakenjs/spud",
  "_id": "spud@1.1.4",
  "_shasum": "d3e4692375b82f2c5390adce98ddcad18227f47d",
  "_from": "spud@^1.1.2",
  "_resolved": "https://registry.npmjs.org/spud/-/spud-1.1.4.tgz"
}
