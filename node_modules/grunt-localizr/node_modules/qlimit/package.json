{
  "name": "qlimit",
  "version": "0.1.1",
  "description": "Limit concurrency of q promises",
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec test/"
  },
  "author": {
    "name": "Andrew Newdigate"
  },
  "license": "MIT",
  "dependencies": {
    "q": "^1.0.0"
  },
  "devDependencies": {
    "mocha": "^2.0.1"
  },
  "readme": "# qlimit\n\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/suprememoocow/qlimit?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nA Q promises library helper to restrict the concurrency of q promises\n\n```\nnpm install qlimit\n```\n\n## Reasoning\n\nSometimes you need to perform an operation operation over a large number of items. The usual way to handle this when using Q promises is to do something like this:\n\n```javascript\nreturn Q.all(items.map(function(item) { \n  return performOperationOnItem(item);\n});\n```\n\nEach item will then be processed in parallel. \n\nIf each execution of `performOperationOnItem` issues an HTTP request or database operation, you may find that this code quickly overwhelms the backend server, or the HTTP client times out before issuing the operation (by default the nodejs's global `HTTP.Agent` will issue 5 concurrent requests to any single host, the rest will be queued).  Too many concurrent connections may result in timeout errors though.\n\n## Using `qlimit`\n\nIt's best explained with a code example:\n\n```javascript\nvar qlimit = require('qlimit');\nvar limit = qlimit(2); // 2 being the maximum concurrency\n\n// Using the same example as above\nreturn Q.all(items.map(limit(function(item) { \n  return performOperationOnItem(item);\n}));\n```\n\n`qlimit` can also be used to limit access to a specific resource, like this\n\n```javascript\nvar qlimit = require('qlimit');\nvar limit = qlimit(2); // 2 being the maximum concurrency\n\nvar fetchSomethingFromEasilyOverwhelmedBackendServer = limit(function (id) {\n  // Emulating the backend service\n  return Q.delay(1000)\n    .thenResolve({ hello: 'world' });\n});\n\nvar promise1 = fetchSomethingFromEasilyOverwhelmedBackendServer(1);\nvar promise2 = fetchSomethingFromEasilyOverwhelmedBackendServer(2);\n\n```\n\nIn this example, calls can then be made to `fetchSomethingFromEasilyOverwhelmedBackendServer` with a\nmaximum concurrency of two. Callers do not need to worry about co-ordinating their calls.\n\n# Licence\n\nLicense\nThe MIT License (MIT)\n\nCopyright (c) 2014, Andrew Newdigate\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "qlimit@0.1.1",
  "_shasum": "b117f841c33cae355e2ee622ebeaf93651c14a99",
  "_from": "qlimit@^0.1.1",
  "_resolved": "https://registry.npmjs.org/qlimit/-/qlimit-0.1.1.tgz"
}
